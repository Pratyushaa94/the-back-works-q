name: Build & Push All Services to ACR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repo
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Java 21
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3Ô∏è‚É£ Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 4Ô∏è‚É£ Login to ACR
      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 5Ô∏è‚É£ Build & push platform-initializer first
      - name: Build & Push platform-initializer
        run: |
          echo "‚úÖ Building JAR for platform-initializer"
          ./gradlew :platform-initializer:clean :platform-initializer:bootJar -x test

          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.NS }}/platform-initializer:${{ github.sha }}"
          echo "üöÄ Building Docker image for platform-initializer -> $IMAGE"
          docker build --no-cache \
            --build-arg SERVICE="platform-initializer" \
            --build-arg GRADLE_ARGS="-Pci=true -PskipDocker=true -PskipAzChecks=true" \
            -t "$IMAGE" .

          echo "üì¶ Pushing Docker image for platform-initializer"
          docker push "$IMAGE"

          docker tag "$IMAGE" "${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.NS }}/platform-initializer:latest"
          docker push "${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.NS }}/platform-initializer:latest"

      # 6Ô∏è‚É£ Discover all other services with bootJar
      - name: Discover Services
        id: services
        run: |
          PROJECTS_RAW=$(./gradlew projects --console=plain | grep -o "Project ':[^']*'")
          ALL_PROJECTS=$(echo "$PROJECTS_RAW" | sed "s/Project ':\(.*\)'/\1/" | sort -u)
          SERVICES=""
          while IFS= read -r P; do
            [ -z "$P" ] && continue
            # skip platform-initializer as already built
            if [ "$P" == "platform-initializer" ]; then continue; fi
            if ./gradlew -q ":${P}:tasks" --all | grep -qE '^bootJar[[:space:]]'; then
              SERVICES="${SERVICES} $P"
            fi
          done <<< "$ALL_PROJECTS"
          echo "SERVICES=$SERVICES" >> $GITHUB_ENV

      # 7Ô∏è‚É£ Build & push each remaining service
      - name: Build & Push Services
        run: |
          for SVC in $SERVICES; do
            echo "‚úÖ Building JAR for $SVC"
            ./gradlew ":$SVC:clean" ":$SVC:bootJar" -x test

            IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.NS }}/$SVC:${{ github.sha }}"
            echo "üöÄ Building Docker image for $SVC -> $IMAGE"
            docker build --no-cache \
              --build-arg SERVICE="$SVC" \
              --build-arg GRADLE_ARGS="-Pci=true -PskipDocker=true -PskipAzChecks=true" \
              -t "$IMAGE" .

            echo "üì¶ Pushing Docker image for $SVC"
            docker push "$IMAGE"

            docker tag "$IMAGE" "${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.NS }}/$SVC:latest"
            docker push "${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.NS }}/$SVC:latest"
          done
