logging:
  level:
    org.springframework.cloud.stream.binder: ${SPRING_LOG_LEVEL:ERROR}
    org.springframework.integration: ${SPRING_LOG_LEVEL:ERROR}
    com.azure.messaging.servicebus: ${SPRING_LOG_LEVEL:ERROR}
    org.springframework: ${SPRING_LOG_LEVEL:ERROR}
    ai.recinci: ${RVC_PLATFORM_LOG_LEVEL:DEBUG}
  pattern:
    level: "%5p [%X{realm:-},%X{tenantId:-},%X{applicationId:-}]"

# Health endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,metrics
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true

# Server settings
server:
  port: 8081

# Application settings
spring:
  main:
    banner-mode: off
  application:
    name: platform-service
  # Redis settings
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      username: ${REDIS_USERNAME:default}
      password: ${REDIS_PASSWORD:redis}
  datasource:
    driverClassName: org.postgresql.Driver
    username: ${MASTER_DB_USER:postgres}
    password: ${MASTER_DB_PASSWORD:postgres}
    url: jdbc:postgresql://${MASTER_DB_HOST:localhost}:${MASTER_DB_PORT:5432}/${MASTER_DB_NAME:local_master_rvc_platform_db}?createDatabaseIfNotExist=true
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      idle-timeout: 30000
      max-lifetime: 60000
      connection-timeout: 30000
  jpa:
    database: POSTGRESQL
    show-sql: ${MASTER_DB_SHOW_SQL:false}
    # Do NOT change generate-ddl to true. This will cause the db to be dropped and recreated.
    generate-ddl: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        default_schema: ${MASTER_DB_SCHEMA:public}
        default_batch_fetch_size: ${RVC_PLATFORM_DEFAULT_BATCH_FETCH_SIZE:30}
        # Leave the ddl-auto to none. Changing to any other value causes the db to be dropped and recreated.
        ddl-auto: none
        boot:
          allow_jdbc_metadata_access: true
        jdbc:
          batch_size: ${RVC_PLATFORM_DEFAULT_BATCH_FETCH_SIZE:30}
          lob:
            non_contextual_creation: true
  liquibase:
    enabled: false
  # Azure Service Bus JMS configuration
  jms:
    servicebus:
      connection-string: ${AZURE_SERVICEBUS_CONNECTION_STRING:Endpoint=sb://localhost;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=}
      pricing-tier: ${AZURE_SERVICEBUS_PRICING_TIER:premium}
  cloud:
    function:
      # Function bound to Spring Cloud Stream
      definition: rvcPlatformOnRealmProvisionedEvent;
    stream:
      bindings:
        # Binding to topic where the new-tenant details will be published to.
        rvcPlatformPublishNewTenantCreatedEvent-out-0:
          destination: ${spring.profiles.active}-rvc-platform-tenant-lifecycle-topic
          binder: servicebus
        # Binding to topic where the tenant notification event will be published to.
        rvcPlatformPublishNotificationEvent-out-0:
          destination: ${spring.profiles.active}-rvc-platform-notification-topic
          binder: servicebus
        # Binding to topic and subscription from where the realm provisioning completion events are published.
        rvcPlatformOnRealmProvisionedEvent-in-0:
          destination: ${spring.profiles.active}-rvc-platform-realm-provisioned-topic
          group: ${spring.profiles.active}-rvc-platform-realm-provisioned-topic-${revinciai.platform.service.key}-sub
          binder: servicebus
# RVC Platform settings.
revinciai:
  platform:
    application-url: "${rvc_PLATFORM_APPLICATION_URL:https://localhost:4200}"
    api:
      documentation:
        title: "RVC Platform : Master/Platform Service APIs"
        description: "APIs for Master/Platform Service"
        version: "${SERVICE_VERSION:0.0.2-SNAPSHOT}"
        base-package: "ai.revinci.platform"
        contact:
          name: "revinci.ai"
          email: "info@revinci.ai"
          url: "https://revinci.ai"
        servers:
          - url: "http://localhost:8081"
            description: "Server running on localhost"
          - url: "https://${spring.profiles.active}-${revinciai.platform.service.api-dns-name}.api.revinci.ai"
            description: "Server running with '${spring.profiles.active}' profile activated"
    service:
      key: ps
      api-dns-name: platform
    security:
      cors:
        headers:
          allowed-origins:
            - https://localhost:4200
          allowed-methods:
            - OPTIONS
            - POST
            - GET
            - PATCH
            - PUT
            - DELETE
          allowed-headers:
            - Origin
            - Accept
            - X-Requested-With
            - Content-Type
            - Access-Control-Request-Method
            - Access-Control-Request-Headers
            - Authorization
            - Tenant-Id
            - X-User-TimeZone
          max-age: 3600
          allow-credentials: true

